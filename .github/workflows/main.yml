on:
  push:
    branches:
    - main
jobs:
   build:
     name: Build for ${{ matrix.os }}
     runs-on: ${{ matrix.os }}

     strategy:
          matrix:
              os: [ubuntu-latest, windows-latest, macos-latest]
     steps:
        - name: Checkout code
          uses: actions/checkout@v3
        - name: Install Dependencies
          run: pip install -r requirements.txt

        - name: Package Linux ONLY
          if: matrix.os == 'ubuntu-latest'
          run: python -m PyInstaller main.spec

        - name: Package Windows ONLY
          if: matrix.os == 'windows-latest'
          run: python -m PyInstaller win.spec

        - name: Rename Windows Executable
          if: matrix.os == 'windows-latest'
          run: mv ./dist/main/main.exe ./dist/main/ivaTools.exe
        
        - name: Package MacOS ONLY
          if: matrix.os == 'macos-latest'
          run: python -m PyInstaller main.spec

        - name: Create MacOS Bundle
          if: matrix.os == 'macos-latest'
          run: |
            chmod +x ./build/main/ivaTools
            mkdir -p ivaTools.app/Contents/MacOS
            mkdir -p ivaTools.app/Contents/Resources
            cp macOS/Info.plist ivaTools.app/Contents/Info.plist
            mv ./build/main/ivaTools ivaTools.app/Contents/MacOS/ivaTools
            cp macOS/icon.icns ivaTools.app/Contents/Resources/icon.icns
            zip -r ivaTools.MacOS.zip ivaTools.app

        - name: Upload Linux
          uses: actions/upload-artifact@v3.1.3
          if: matrix.os == 'ubuntu-latest'
          with:
            name: linux
            path: ./build/main/ivaTools
        - name: Upload Windows
          uses: actions/upload-artifact@v3.1.3
          if: matrix.os == 'windows-latest'
          with:
            name: windows
            path: ./dist/main/ivaTools.exe
        
        - name: Upload MacOS
          uses: actions/upload-artifact@v3.1.3
          if: matrix.os == 'macos-latest'
          with:
            name: macOS
            path: ivaTools.MacOS.zip
            
   release:
        runs-on: ubuntu-latest
        needs: [build]
    
        steps:
          - name: Checkout code
            uses: actions/checkout@v3
    
          - uses: actions/download-artifact@v3
            with:
              name: linux
              path: builds
    
          - uses: actions/download-artifact@v3
            with:
              name: macOS
              path: builds
    
          - uses: actions/download-artifact@v3
            with:
              name: windows
              path: builds
              
          - run: |
              gh release upload release --clobber builds/*
          
        env:
                GITHUB_TOKEN: ${{ secrets.RELEASETOKEN }}
          
          
                
              
            
